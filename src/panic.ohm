PANIC {
Program = Statement+
   
    Statement = VarDec
    			| FuncDec
                | Exp ":" Exp  --assign
                | break --break
                | (return | r) Exp   --return
                | FuncCall
                | IfStmt
                | LoopStmt
                | Exp
               
    FuncCall    = Exp (Exp | id)*
    					| (print | p | pl) (Exp | id)*
                        
    FuncDec = (function | f) id "(" ListOf<Params, ",">? ")" ("->" type)? Block
   
    VarDec =(mu | im) id ":" (Exp | RangeExp)
   
    Block = "{" Statement* "}"
    
    IfStmt = If Elif* Else?
    
	If  = if Exp ":" Block
    Elif = elif Exp ":" Block
    Else = else ":" Block
      
   LoopStmt = l id PatternExp ":" Block  --for
   						| l VarDec "," Exp_test  "," Exp --while
   
   PatternExp = "," index "in" (RangeExp | numLit_int | id)       --enumerate
   						| "in" (RangeExp | numLit_int | id)					--basicFor
                        
   
   
     Exp               = Exp (boolLogic) Exp                                                 --logic
             | Condition relop Condition                                           --test
                 | Condition
  Condition         = Exp "+" Term                                                        --add
                    | Exp "-" Term                                                        --sub
                    | Term
  Term              = Term "*" Factor                                                     --mul
                    | Term "/" Factor                                                     --div
                    | Term "%" Factor                                                     --mod
                    | Factor
  Factor            = Primary ("**") Factor                                               --exp
                    | "-" Primary                                                         --neg
                    | Primary
  Primary           = 
                    | id                                                            --id
                    | FuncCall
                    | true                                                                --true
                    | false                                                               --false
                    | "(" Exp ")"                                                         --parens
                    | Literal                                                   --literal
   
  Literal = RangeExp | stringLit | numLit
  				| "-" numLit		--negNumber
  
numLit =  digit+ "." digit+ --float
                | digit+	--int


  RangeExp             = "[" numRange ("," ("+" | "-") digit+)? "]"
  numRange          = (numLit| id) through (numLit | id)
  through           = "..."
 
  Params = id type --typedArg
 			 | id ":" Exp --default
   
  stringLit     = "\"" (~"\"" any)* "\""

  function          = "function"
  f                 = "f"
  print             = "print"
  p                 = "p"
  pl            = "pl"
  for            = "for"
  l              = "l"
  if                = "if"
  elif              = "elif"
  else              = "else"
  break             = "break"
  true              = "true"
  false             = "false"
  return          = "return"
  or                = "or"
  and               = "and"
  r            = "r"
  mu = "mu"
  im = "im"
  in = "in"
  index = "index"
  keyword           = (f | function | print | pl | p | l | for | if | elif | else | break | return | r | true | false | or | and | im | mu | in | index) ~idchar
  id                = ~keyword letter idchar*
  idchar            = letter | digit | "_"
  numeral           = digit+ ("." digit+)? (("E"|"e") ("+"|"-")? digit+)?
  relop             = "<=" | "<" | "=" | "!=" | ">=" | ">"
  boolLogic         = or | and
  type = ~keyword letter+
 
  space             += "#" (~"\n" any)*                                                 --comment
}