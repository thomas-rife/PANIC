PANIC {
	Program = Statement+
   
    Statement = VarDec
    			| FuncDec
                | Exp ":" Exp  --assign
                | (break | b) --break
                | (return | r) Exp   --return
                | MemberExp
                | FuncCall
                | IfStmt
                | LoopStmt
                | ClassDec
                | Exp
                
    ClassDec = c id ClassBlock
    
    ClassBlock = "{" Constructor? FuncDec* "}"
    
    Constructor = con "(" ClassParam* ")"
    
    ClassParam = id type --typedArg
 			 | id ":" Exp --default
    
    MemberExp = id "." id "(" Exp* ")"
                   
    FuncCall    = id "(" Exp* ")"	--normal
    					| (print | pl | p) "(" Exp* ")"	--intrinsic
                        
    FuncDec = (function | f) id "(" Param* ")" ("->" type)? Block
   
    VarDec =(mu | im) id ":" (Exp | RangeExp)
   
    Block = "{" Statement* "}"
    
    IfStmt = If Elif* Else?
    
	If  = if Exp Block
    Elif = elif Exp Block
    Else = else Block
      
   LoopStmt = l id PatternExp Block  --for
   						| l Exp2_test Block--while
   
   PatternExp = "in" (RangeExp | numLit_int | id)					--basicFor
                        
	Exp 		= Exp1 "?" Exp1 ":" Exp									--conditional
    				| Exp1
     Exp1		=  Exp1 or Exp2                --or
            | Exp1 and Exp2               --and
     				| Exp2
    Exp2        = Exp3 relop Exp3                   --test
             		 | Exp3
  	Exp3        = Exp3 ("+" | "-") Exp4              --add
                    | Exp4
    Exp4        = Exp4 ("*" | "/" | "%") Exp5       --mul
                    | Exp5
  	Exp5       = Exp6 ("**") Exp5                    --exp
                    | ("-" | "!") Exp6                       --neg
                    | Exp6
  	Exp6        = id arrayIndex+									  --indexing
                    | FuncCall
                    | MemberExp
                    | true                           --true
                    | false                           --false
                    | "(" Exp3 ")"                    --parens
                    | Literal                        --literal
                    | id                          --id
   
   arrayIndex = "[" numLit_int "]"  --singleIndex
   						| "[" numLit_int? ":" numLit_int? "]" --multipleElems
   
  Literal = RangeExp | ArrayLiteral | stringLit | numLit
  				| "-" numLit		--negNumber
  
numLit =  digit+ "." digit+ --float
                | digit+	--int

ArrayLiteral = "[" (numLit)* "]"

  RangeExp             = "[" numRange ("," ("+" | "-") digit+)? "]"
  numRange          = (numLit| id) through (numLit | id)
  through           = "..."
 
  Param = id type --typedArg
 			 | id ":" Exp --default
   
  stringLit     = "\"" (~"\"" any)* "\""

  function          = "function"
  f                 = "f"
  print             = "print"
  p                 = "p"
  pl            = "pl"
  for            = "for"
  l              = "l"
  if                = "if"
  elif              = "elif"
  else              = "else"
  break             = "break"
  b = "b"
  true              = "true"
  false             = "false"
  return          = "return"
  or                = "or"
  and               = "and"
  r            = "r"
  mu = "mu"
  im = "im"
  in = "in"
  index = "index"
  c = "c"
  con = "con"
  keyword           = (f | function | print | pl | p | l | for | if | elif | else | break | return | r | true | false | or | and | im | mu | in | index | c | b) ~idchar
  id                = ~keyword letter idchar*
  idchar            = letter | digit | "_"
  numeral           = digit+ ("." digit+)? (("E"|"e") ("+"|"-")? digit+)?
  relop             = "<=" | "<" | "=" | "!=" | ">=" | ">"
  type = ~keyword letter+
 
  space             += "#" (~"\n" any)*                                                 --comment
}