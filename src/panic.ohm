PANIC {
  Program           = GlobalStmt+
  GlobalStmt        = VarDec
                    | PrintStmt
                    | LoopStmtGlobal
                    | IfStmtGlobal
                    | AssignmentStmt
                    | "++" Primary_id                                                         --increment
            	      | FuncDec
                    | ExprStmt
                    | ReturnStmt
                  
  LocalStmt  		    = VarDec
                    | PrintStmt
                    | LoopStmtLocal
                    | IfStmtLocal
                    | AssignmentStmt
                    | FuncDec
                    | BreakStmt
                    | ReturnStmt
                    | ExprStmt

  ExprStmt          = Exp

  FuncDec           = (function | f) id ParamList ("->" id)? ":" BlockLocal
  FuncCall          = id "(" CallArgs? ")"--funcCall
  				          | (id | funcKeyword) "->" (id | funcKeyword) ("->" (id | funcKeyword))*  --arrowsFuncs
  CallArgs          = Exp ("," Exp)*
  ParamList         = "(" ParamListContent? ")"
  ParamListContent  = (alnum+ | id) (", " (alnum+ | id))*
  VarDec            = id ":" Exp	--single
  					        | id "," id ":" Exp ","  Exp                                            --multAssign
  PrintStmt         = (print | pl | p) PrintArgs
  PrintArgs	        = Exp ("," Exp)*
  AssignmentStmt    = Primary_id ":" (Exp | ArrayLiteral)
  
  IfStmtGlobal      = if Exp ":" BlockGlobal (ElifClauseGlobal)* (else ":" BlockGlobal)?
  ElifClauseGlobal  = elif Exp ":" BlockGlobal

  IfStmtLocal       = if Exp ":" LocalStmt+ (ElifClauseLocal)* (else ":" LocalStmt+)?  
  ElifClauseLocal   = elif Exp ":" BlockLocal
  BlockGlobal       = GlobalStmt*
  BlockLocal        = LocalStmt*
  
  LoopStmtGlobal    = (l | for) id "in" (Range | Exp) BlockGlobal ":"
  LoopStmtLocal     = 	(l | for) id "in" (Range | Exp) BlockLocal ":"
  
  Range             = "[" Exp Through Exp "]"
  ArrayLiteral      = "[" (NumRange | Exp)? ("," (NumRange | Exp))* ("," ("+" | "-") digit+)? "]"  
  NumRange          = (digit | id) Through (digit | id)
  Through           = "..."
  

  ReturnStmt        = (return | r) (" " Exp)?
  BreakStmt 	      = break
  
  Exp               = Exp (boolLogic) Exp  --logic
 				            | Condition relop Condition                                           --test
            	      | Condition
  Condition         = Exp "+" Term                                                        --add
                    | Exp "-" Term                                                        --sub
                    | Term
  Term              = Term "*" Factor                                                     --mul
                    | Term "/" Factor                                                     --div
                    | Term "%" Factor                                                     --mod
                    | Factor
  Factor            = Primary ("**") Factor                                               --exp
                    | "-" Primary                                                         --neg
                    | Primary
  Primary           = FuncCall
                    | numeral
                    | id                                                                  --id
                    | true                                                                --true
                    | false                                                               --false
                    | "(" Exp ")"                                                         --parens
                    | string					                                                    --string
            
  string            = "\"" (~"\"" any)* "\""

  function          = "function" 	~idchar
  f                 = "f" 			~idchar
  print             = "print" 		~idchar
  p                 = "p" 			~idchar
  pl 		            = "pl"         ~idchar
  for		            = "for" 		~idchar
  l     	          = "l" 			~idchar
  if                = "if" 			~idchar
  elif              = "elif" 		~idchar
  else              = "else" 		~idchar
  break             = "break" 		~idchar
  true              = "true" 		~idchar
  false             = "false" 		~idchar
  return	          = "return"		~idchar
  or                = "or" 					~idchar
  and               = "and"
  
  r			            = "r"			~idchar
  keyword           = f | function | print | pl | p | l | for | if | elif | else | break | return | r | true | false | or | and
  funcKeyword       = print | pl | p
  id                = ~keyword letter idchar*
  idchar            = letter | digit | "_"
  numeral           = digit+ ("." digit+)? (("E"|"e") ("+"|"-")? digit+)?
  relop             = "<=" | "<" | "=" | "!=" | ">=" | ">"
  boolLogic         = or | and
  
  space             += "#" (~"\n" any)*                                                 --comment
}
